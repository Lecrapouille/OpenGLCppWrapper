@startuml

' OpenGL class inheritance

note as NoteBegin
T is GLenum or GLint. handle is set by create()

begin() {
  if (need_create) { need_create = create() || exit(); }
  activate();
  if (need_setup) { need_setup = setup() || exit(); }
  if (need_update) { need_update = update(); }
}

end() {
  deactivate();
}
end note

NoteBegin .. IGLObject
class IGLObject<T> {
+ gpuID(): T
+ name(): string
+ handleIsValid(): bool
+ begin()
+ end()
-{abstract} create(): bool = 0
-{abstract} setup(): bool = 0
-{abstract} activate() = 0
-{abstract} update(): bool = 0
-{abstract} deactivate() = 0
-{abstract} release(): bool = 0
- handle: T
- target: GLenum
}

class PendingData {
+ PendingData()
+ PendingData(nb_elt: size_t)
+ clearPending()
+ setPending(first: size_t, last: size_t)
+ setPending(elt: size_t)
+ std::pair<first, last> getPending()
+ hasPending(): bool
}

class PendingContainer<C> {
-std::container<C> container
+operator=(std::container<C>)
+operator*=(std::container<C>)
+operator*=(C)
+operator+=(std::container<C>)
+operator+=(C)
+append(std::container<C>)
}

PendingData <|-- PendingContainer

class IGLTexture<GLenum> {
-std::container<byte> data
+IGLTexture(target: GLenum)
+width(): uint32
+height(): uint32
+depth(): uint32
+{abstract} loaded(): bool = 0
-{abstract} create(): bool
-{abstract} activate()
-{abstract} deactivate()
-{abstract} release(): bool
-width: uint32
-height: uint32
-depth: uint32
}

class GLTexture2D {
+IGLTexture(GL_TEXTURE_2D)
+load(filename: string): bool
+operator[](uint32): byte&
+{abstract} loaded(): bool
-{abstract} setup(): bool
-{abstract} update(): bool
-gpu_format = GL_RGBA
-cpu_format = GL_RGBA
}

class GLTexture2DDepth {
-gpu_format = GL_DEPTH_COMPONENT
-cpu_format = GL_DEPTH_COMPONENT
}

class GLTexture3D {
+IGLTexture(GL_TEXTURE_CUBE_3D)
+load(filenames[]: string): bool
+{abstract} loaded(): bool
-{abstract} setup(): bool
-{abstract} update(): bool
}

class GLTextureCube {
+IGLTexture(GL_TEXTURE_CUBE_MAP)
+load(filenames[6]: string): bool
+{abstract} loaded(): bool
-{abstract} setup(): bool
-{abstract} update(): bool
-textures[6]: GLTexture2D
}

class GLTexture1D {
+IGLTexture(GL_TEXTURE_1D)
+operator[](uint32): byte&
+{abstract} loaded(): bool
-{abstract} setup(): bool
-{abstract} update(): bool
}

IGLTexture <|-- GLTexture1D
IGLTexture <|-- GLTexture2D
GLTexture2D <|-- GLTexture2DDepth
GLTexture2D <|-- GLTexture2DFloat
GLTextureCube *-> "6" GLTexture2D
IGLTexture <|-- GLTexture3D
IGLTexture <|-- GLTextureCube

class GLShaders<GLuint> {
+GLShaders(target: GLenum)
+load(std::string)
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
}

class GLVertexShader {
+GLShaders(GL_VERTEX_SHADER)
}

class GLFragmentShader {
+GLShaders(GL_FRAGMENT_SHADER)
}

class GLGeometryShader {
+GLShaders(GL_GEOMETRY_SHADER)
}

GLShaders <|-- GLVertexShader
GLShaders <|-- GLFragmentShader
GLShaders <|-- GLGeometryShader

class GLProgram<GLenum> {
+attach(GLShaders)
+operator(std::string const&): GLLocation&
-list: std::map<std::string, GLLocation>
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
-GLShaders shaders
}

class GLVAO<GLenum> {
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
}

class GLFrameBuffer<GLenum> {
-GLRenderBuffer[] buffers
+resize(w: uint32, h: uint32)
+render(f: Functor)
+getColorTexture(texture: GLTexture2D&)
+createColorBuffer()
+createDepthBuffer()
+createStencilBuffer()
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
}

class GLRenderBuffer<GLenum> {
+ GLRenderBuffer(target : GLenum)
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
}

class GLTextureBuffer {
-texture: GLTexture2D
+GLTextureBuffer(GLTexture2D)
-format=GL_RGBA
}

class GLColorBuffer {
-format=GL_RGBA
}

class GLDepthBuffer {
-format=GL_DEPTH_COMPONENT
}

class GLStencilBuffer {
-format=GL_STENCIL_INDEX8
}

class GLVBO<C, T=GLenum> {
-container: PendingContainer<C>
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
}

class GLLocation<GLint> {
+GLLocation(name: string, location: GLint, dim: GLint)
+location(): GLint
+dim(): GLint
+type(): GLenum
}

class GLAttribute {
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
}

class GLIUniform {
+operator=(val: T&)
-{abstract} create(): bool
-{abstract} setup(): bool
-{abstract} activate()
-{abstract} update(): bool
-{abstract} deactivate()
-{abstract} release(): bool
}

class GLUniform<T> {
+operator=(val: T&)
+data(): T&
-{abstract} update(): bool
-data: T
}

class GLUniform<float> {
}
class "GLUniform<float>" as GLUniformFloat

class GLUniform<Vectorxf> {
}
class "GLUniform<Vectorxf>" as GLUniformVectorxf

class GLUniform<Matrixyyf> {
}
class "GLUniform<Matrixyyf>" as GLUniformMatrixyyf


class GLSampler {
+textureId(): GLenum
-{abstract} activate()
-{abstract} update(): bool
-texture_id: GLenum
}

class GLSampler1D {
}

class GLSampler2D {
}

class GLSampler3D {
}

class GLSamplerCube {
}

class GLSampler1D {
}

GLLocation <|-- GLAttribute
GLLocation <|-- GLIUniform
GLIUniform <|-- GLUniform
GLUniform <|-- GLUniformFloat
GLUniform <|-- GLUniformVectorxf
GLUniform <|-- GLUniformMatrixyyf
GLIUniform <|-- GLSampler
GLSampler  <|-- GLSampler1D
GLSampler  <|-- GLSampler2D
GLSampler  <|-- GLSampler3D
GLSampler  <|-- GLSamplerCube

PendingContainer "1" <--* IGLTexture
IGLObject <|-- IGLTexture
IGLObject <|-- GLVBO
PendingContainer <|-- GLVBO
IGLObject <|-- GLVAO
GLVAO o-> "*" GLVBO
IGLTexture "*" <-o GLVAO
IGLObject <|-- GLShaders
GLProgram -> "*" GLShaders
IGLObject <|-- GLProgram
GLLocation "*" <-o GLProgram
IGLObject <|-- GLLocation

IGLObject <|-- GLFrameBuffer
IGLObject <|-- GLRenderBuffer
GLRenderBuffer "*" <- GLFrameBuffer
GLRenderBuffer <|-- GLColorBuffer
GLRenderBuffer <|-- GLDepthBuffer
GLRenderBuffer <|-- GLStencilBuffer
GLRenderBuffer <|-- GLTextureBuffer
GLTexture2D "1" <-* GLTextureBuffer

@enduml
